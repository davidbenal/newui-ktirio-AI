rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }

    function hasEnoughCredits(required) {
      return getUserData().credits >= required;
    }

    // Users collection
    match /users/{userId} {
      allow read: if isOwner(userId);
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if false; // Prevent user deletion
    }

    // Projects collection
    match /projects/{projectId} {
      allow read: if isOwner(resource.data.userId);
      allow create: if isAuthenticated() &&
                      request.resource.data.userId == request.auth.uid &&
                      request.resource.data.name is string &&
                      request.resource.data.isFavorite is bool &&
                      request.resource.data.isArchived is bool;
      allow update: if isOwner(resource.data.userId);
      allow delete: if isOwner(resource.data.userId);
    }

    // Versions collection
    match /versions/{versionId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() &&
                      request.resource.data.projectId is string &&
                      request.resource.data.imageUrl is string;
      allow update: if false; // Versions are immutable
      allow delete: if isAuthenticated();
    }

    // Credit Transactions collection
    match /creditTransactions/{transactionId} {
      allow read: if isOwner(resource.data.userId);
      allow create: if false; // Only server can create transactions
      allow update, delete: if false;
    }
  }
}
